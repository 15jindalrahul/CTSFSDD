package CD;

import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.Getter;
import lombok.EqualsAndHashCode;

@Setter
@NoArgsConstructor
@AllArgsConstructor

@Getter

public class Internatinalcd {
	private int cd_Id;
	private String name;
	private double rate;

	/*
	 * IT IS GOOD PRACTICE TO CALL HASH CODE AND TO EQUALS METHODS
	 * 
	 * THEY ARE GENERATED BY JAVA RUN TIME ENIVORNMENT AND THEIR LOGIC IS ALSO
	 * PRE-DEFINED BY JVM.
	 * 
	 * BUT ALSO IF WE WANT OUR LOGIC WE CAN MODIFY IT.
	 * 
	 * 
	 * 
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + cd_Id;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		long temp;
		temp = Double.doubleToLongBits(rate);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Internatinalcd other = (Internatinalcd) obj;
		if (cd_Id != other.cd_Id)
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (Double.doubleToLongBits(rate) != Double.doubleToLongBits(other.rate))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Internatinalcd [cd_Id=" + cd_Id + ", name=" + name + ", rate=" + rate + "]";
	}

	/*
	 * polymorphic object cd
	 * 
	 * 
	 * it means it can access same methods of base as well as inherited class
	 * 
	 * 
	 * 
	 */

	public void getcdtype(CD cd)
	{
		
		
	
		if(cd instanceof international)
	}

}
